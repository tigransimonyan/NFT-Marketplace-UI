{"version":3,"sources":["components/ColorModeSwitcher.js","assets/logo.svg","components/Logo.js","components/Header.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","onClick","icon","Logo","src","logo","NAV_ITEMS","label","href","NavLink","navItem","fontWeight","_hover","textDecoration","Header","useDisclosure","isOpen","onToggle","borderBottom","borderColor","h","px","base","bg","borderStyle","w","pointerEvents","pl","flex","display","md","children","Search","borderRadius","placeholder","direction","align","spacing","map","index","colorScheme","justifySelf","Close","Hamburger","in","animateOpacity","App","theme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6fb44e8b.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/logo.034ef726.svg\";","import React from 'react';\nimport { Image } from '@chakra-ui/react';\nimport logo from '../assets/logo.svg';\n\nexport const Logo = props => {\n  return <Image src={logo} {...props} />;\n};\n","import React from 'react';\nimport {\n  Box,\n  Flex,\n  Button,\n  Input,\n  Stack,\n  Link,\n  InputGroup,\n  InputLeftElement,\n  IconButton,\n  Collapse,\n  useDisclosure,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport { Logo } from './Logo';\n\nimport { HamburgerIcon, CloseIcon, SearchIcon } from '@chakra-ui/icons';\n\nconst NAV_ITEMS = [\n  {\n    label: 'My Items',\n    href: '#',\n  },\n  {\n    label: 'Transfer',\n    href: '#',\n  },\n];\n\nfunction NavLink({ navItem }) {\n  return (\n    <Link\n      href={navItem.href}\n      fontSize={'sm'}\n      fontWeight={700}\n      color={useColorModeValue('gray.600', 'gray.200')}\n      _hover={{\n        textDecoration: 'none',\n        color: useColorModeValue('gray.800', 'white'),\n      }}\n    >\n      {navItem.label}\n    </Link>\n  );\n}\n\nfunction Header() {\n  const { isOpen, onToggle } = useDisclosure();\n  return (\n    <Box>\n      <Flex\n        borderBottom=\"1px\"\n        borderColor=\"gray.200\"\n        h=\"78px\"\n        px={{ base: 4 }}\n        bg={useColorModeValue('white', 'gray.800')}\n        borderStyle={'solid'}\n        borderColor={useColorModeValue('gray.200', 'gray.900')}\n        align={'center'}\n      >\n        <Box>\n          <Logo w=\"40px\" pointerEvents=\"none\" />\n        </Box>\n        <Box pl=\"5\" flex=\"1\">\n          <InputGroup display={{ base: 'none', md: 'flex' }}>\n            <InputLeftElement children={<SearchIcon color=\"gray.300\" />} />\n            <Input\n              borderRadius=\"3xl\"\n              placeholder=\"Search by creator, collectible or collection\"\n              size=\"md\"\n            />\n          </InputGroup>\n        </Box>\n        <Box pl=\"5\" display={{ base: 'none', md: 'flex' }}>\n          <Stack pl=\"5\" direction=\"row\" align=\"center\" spacing={6}>\n            {NAV_ITEMS.map((navItem, index) => (\n              <NavLink key={index} navItem={navItem} />\n            ))}\n          </Stack>\n          <Stack pl=\"7\" direction=\"row\" align=\"center\" spacing={3}>\n            <Button variant={'solid'} colorScheme={'teal'} size=\"md\">\n              Create\n            </Button>\n            <Button variant={'outline'} colorScheme={'teal'} size=\"md\">\n              Connect wallet\n            </Button>\n            <ColorModeSwitcher justifySelf=\"flex-end\" />\n          </Stack>\n        </Box>\n        <Box display={{ base: 'flex', md: 'none' }}>\n          <IconButton\n            onClick={onToggle}\n            icon={\n              isOpen ? <CloseIcon w={3} h={3} /> : <HamburgerIcon w={5} h={5} />\n            }\n            variant=\"outline\"\n            aria-label={'Toggle Navigation'}\n          />\n        </Box>\n      </Flex>\n      <Collapse in={isOpen} animateOpacity></Collapse>\n    </Box>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport { ChakraProvider, theme } from '@chakra-ui/react';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Header />\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}